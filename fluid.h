// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef fluid_h
#define fluid_h
#include <FL/Fl.H>
#include "ti_lpc.h"
extern int mode; 
extern int aud_pos; 
extern float aud_gain; 
extern bool use_interp; 
extern bool use_filter; 
extern int srate; 
extern int srate_au; 
extern int au_aud_gain; 
extern string au_fname; 
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
extern Fl_Menu_Bar *meMain;
#include <FL/Fl_Button.H>
#include <FL/Fl_Input.H>
extern Fl_Input *fi_romfname;
#include <FL/Fl_Value_Slider.H>
extern Fl_Value_Slider *fvs_aud_gain;
extern mytexteditor2 *te_romaddr;
extern mytexteditor *te_lpcdata;
extern mytexteditor2 *te_wordlist;
#include <FL/Fl_Text_Editor.H>
extern Fl_Text_Editor *te_chirp;
extern Fl_Input *fi_romaddr;
#include <FL/Fl_Check_Button.H>
extern Fl_Check_Button *ck_interp;
extern Fl_Check_Button *ck_filter;
#include <FL/Fl_Value_Input.H>
extern Fl_Value_Input *fi_srate;
#include <FL/Fl_Group.H>
extern Fl_Group *fluid_gph1;
extern Fl_Input *fi_romfname1;
extern Fl_Input *fi_lpc_hex;
extern Fl_Check_Button *ck_pitch_6bits;
extern Fl_Value_Input *fi_srate_au;
extern Fl_Value_Slider *fvs_au_aud_gain;
extern Fl_Input *fi_au_fname;
extern Fl_Input *fi_lpc_decimal;
extern void cb_fi_addr_step_combo(Fl_Input*, void*);
extern Fl_Input *fi_addr_step_delay;
extern Fl_Input *fi_addr_step_delta;
extern void cb_bt_addr_step_combo(Fl_Button*, void*);
extern Fl_Input *fi_addr_step_count;
#include <FL/Fl_Box.H>
extern Fl_Box *bx_addr_step_led;
extern Fl_Input *fi_addr_snd_end;
extern void cb_bt_addr_dec_inc_val(Fl_Button*, void*);
extern Fl_Input *fi_addr_dec_inc_val;
extern void cb_bt_addr_hist_prev_next(Fl_Button*, void*);
extern Fl_Box *bx_addr_hist_label;
extern void cb_bt_hex_byte_text_file(Fl_Button*, void*);
Fl_Double_Window* main_window();
void cb_bt_romfile_sel(Fl_Widget*, void*);
void cb_bt_romfile1_sel(Fl_Widget*, void*);
void cb_fi_romfname(Fl_Widget*, void*);
void cb_fi_romfname1(Fl_Widget*, void*);
void cb_bt_play(Fl_Widget*, void*);
void cb_bt_stop(Fl_Widget*, void*);
extern Fl_Text_Buffer *tb_lpcdata; 
extern Fl_Text_Buffer *tb_romaddr; 
extern Fl_Text_Buffer *tb_wordlist; 
extern Fl_Text_Buffer *tb_chirp; 
void cb_fvs_aud_gain(Fl_Widget *w, void*);
void cb_bt_open_audio_editor(Fl_Widget*, void*);
void cb_fi_romaddr(Fl_Widget *w, void *v);
void cb_ck_interp(Fl_Widget *w, void *v);
void cb_ck_filter(Fl_Widget *w, void *v);
void cb_fi_srate(Fl_Widget *w, void *v);
void cb_bt_addr_plus(Fl_Widget*, void*);
void cb_bt_addr_minus(Fl_Widget*, void*);
void cb_bt_addr_plus4(Fl_Widget*, void*);
void cb_bt_addr_minus4(Fl_Widget*, void*);
void cb_bt_addr_plus_last(Fl_Widget*w, void*v);
void cb_fi_lpc_hex(Fl_Widget *w, void *v);
void cb_fi_lpc_decimal(Fl_Widget *w, void *v);
void cb_bt_play_lpc_hex(Fl_Widget*, void*);
void cb_bt_play_lpc_decimal(Fl_Widget*, void*);
void cb_ck_pitch_6bits(Fl_Widget*w, void*v);
void cb_fi_srate_au(Fl_Widget *w, void *v);
void cb_fvs_au_aud_gain(Fl_Widget *w, void*);
void cb_bt_tms5100(Fl_Widget *w, void*);
void cb_bt_tms5110(Fl_Widget *w, void*);
void cb_bt_tms5200(Fl_Widget *w, void*);
void cb_bt_tms5220(Fl_Widget *w, void*);
void cb_bt_play_lpc_file(Fl_Widget*, void*);
void cb_bt_addr_play(Fl_Widget*, void*);
void cb_bt_addr_enter(Fl_Widget*w, void*v);
void cb_bt_addr_plus8(Fl_Widget*, void*);
void cb_bt_addr_minus8(Fl_Widget*, void*);
#endif
