// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "fluid.h"
int mode; 
int aud_pos; 
float aud_gain; 
bool use_interp; 
bool use_filter; 
int srate; 
int srate_au; 
int au_aud_gain; 
string au_fname; 

Fl_Menu_Bar *meMain=(Fl_Menu_Bar *)0;

Fl_Input *fi_romfname=(Fl_Input *)0;

Fl_Value_Slider *fvs_aud_gain=(Fl_Value_Slider *)0;

mytexteditor2 *te_romaddr=(mytexteditor2 *)0;

mytexteditor *te_lpcdata=(mytexteditor *)0;

mytexteditor2 *te_wordlist=(mytexteditor2 *)0;

Fl_Text_Editor *te_chirp=(Fl_Text_Editor *)0;

Fl_Input *fi_romaddr=(Fl_Input *)0;

Fl_Check_Button *ck_interp=(Fl_Check_Button *)0;

Fl_Check_Button *ck_filter=(Fl_Check_Button *)0;

Fl_Value_Input *fi_srate=(Fl_Value_Input *)0;

Fl_Group *fluid_gph1=(Fl_Group *)0;

Fl_Input *fi_romfname1=(Fl_Input *)0;

Fl_Input *fi_lpc_hex=(Fl_Input *)0;

Fl_Check_Button *ck_pitch_6bits=(Fl_Check_Button *)0;

Fl_Value_Input *fi_srate_au=(Fl_Value_Input *)0;

Fl_Value_Slider *fvs_au_aud_gain=(Fl_Value_Slider *)0;

Fl_Input *fi_au_fname=(Fl_Input *)0;

Fl_Input *fi_lpc_decimal=(Fl_Input *)0;

Fl_Double_Window* main_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(985, 955, "ti_lpc_app");
    w = o; if (w) {/* empty */}
    o->labelsize(11);
    { meMain = new Fl_Menu_Bar(0, 0, 960, 20);
    } // Fl_Menu_Bar* meMain
    { Fl_Button* o = new Fl_Button(925, 25, 35, 20, "Sel");
      o->tooltip("select a vsm rom, need to do this for both roms as they are paired");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_romfile_sel);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(5, 70, 40, 20, "Play");
      o->tooltip("play current lpc data");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_play);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(50, 70, 40, 20, "Stop");
      o->tooltip("stop playing lpc data");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_stop);
    } // Fl_Button* o
    { fi_romfname = new Fl_Input(45, 25, 865, 20, "rom0:");
      fi_romfname->tooltip("enter a rom filename for addr: 0x0000 (16KB), remember roms are paired, so se\
lect both together");
      fi_romfname->labelsize(11);
      fi_romfname->textsize(11);
      fi_romfname->callback((Fl_Callback*)cb_fi_romfname);
      fi_romfname->when(FL_WHEN_CHANGED);
    } // Fl_Input* fi_romfname
    { fvs_aud_gain = new Fl_Value_Slider(920, 219, 25, 153, "gain");
      fvs_aud_gain->tooltip("adj audio level to sound hardware");
      fvs_aud_gain->labelsize(9);
      fvs_aud_gain->minimum(300);
      fvs_aud_gain->maximum(0);
      fvs_aud_gain->textsize(7);
      fvs_aud_gain->callback((Fl_Callback*)cb_fvs_aud_gain);
    } // Fl_Value_Slider* fvs_aud_gain
    { te_romaddr = new mytexteditor2(820, 197, 75, 180, " ");
      te_romaddr->tooltip("lpc addresses from rom, right click on an address to render audio");
      te_romaddr->box(FL_DOWN_FRAME);
      te_romaddr->color(FL_BACKGROUND2_COLOR);
      te_romaddr->selection_color(FL_SELECTION_COLOR);
      te_romaddr->labeltype(FL_NORMAL_LABEL);
      te_romaddr->labelfont(0);
      te_romaddr->labelsize(14);
      te_romaddr->labelcolor(FL_FOREGROUND_COLOR);
      te_romaddr->align(Fl_Align(FL_ALIGN_TOP));
      te_romaddr->when(FL_WHEN_RELEASE);
    } // mytexteditor2* te_romaddr
    { te_lpcdata = new mytexteditor(245, 196, 565, 180, "LPC hex byte strings");
      te_lpcdata->tooltip("lpc hex byte stream, one stream per line, right click on a line to render aud\
io");
      te_lpcdata->box(FL_DOWN_FRAME);
      te_lpcdata->color(FL_BACKGROUND2_COLOR);
      te_lpcdata->selection_color(FL_SELECTION_COLOR);
      te_lpcdata->labeltype(FL_NORMAL_LABEL);
      te_lpcdata->labelfont(0);
      te_lpcdata->labelsize(12);
      te_lpcdata->labelcolor(FL_FOREGROUND_COLOR);
      te_lpcdata->align(Fl_Align(FL_ALIGN_TOP));
      te_lpcdata->when(FL_WHEN_RELEASE);
    } // mytexteditor* te_lpcdata
    { te_wordlist = new mytexteditor2(5, 196, 240, 180, "Speak Spell\'s Rom Contents");
      te_wordlist->tooltip("word lists read from both roms( only valid for speak & spell roms pairs), rig\
ht click on an address on the left to render audio");
      te_wordlist->box(FL_DOWN_FRAME);
      te_wordlist->color(FL_BACKGROUND2_COLOR);
      te_wordlist->selection_color(FL_SELECTION_COLOR);
      te_wordlist->labeltype(FL_NORMAL_LABEL);
      te_wordlist->labelfont(0);
      te_wordlist->labelsize(12);
      te_wordlist->labelcolor(FL_FOREGROUND_COLOR);
      te_wordlist->align(Fl_Align(FL_ALIGN_TOP));
      te_wordlist->when(FL_WHEN_RELEASE);
    } // mytexteditor2* te_wordlist
    { te_chirp = new Fl_Text_Editor(5, 398, 895, 220, "tms5xxx code tables");
      te_chirp->tooltip("enter hex byte (or decimal number) strings, one line per param, chirp wfm, en\
ergy, pitch count, pitch, 10 lattice iir filter(k0-->k9) lookup codes, click o\
n buttons at right to see some examples (chirp=10,-5,... for decimal, chirp_hx\
=0A,0xa,... for hex)");
      te_chirp->labelsize(13);
    } // Fl_Text_Editor* te_chirp
    { fi_romaddr = new Fl_Input(820, 176, 75, 20, "addr:");
      fi_romaddr->tooltip("enter a rom address to utter");
      fi_romaddr->labelsize(11);
      fi_romaddr->textsize(11);
      fi_romaddr->callback((Fl_Callback*)cb_fi_romaddr);
      fi_romaddr->when(FL_WHEN_ENTER_KEY_ALWAYS);
    } // Fl_Input* fi_romaddr
    { Fl_Button* o = new Fl_Button(925, 97, 50, 20, "AEdit");
      o->tooltip("open audio editor, edit script/bat to start your favourite audio editor, see:\
  Linux: \'open_audio_editor.sh\',   Win: \'open_audio_editor.bat\'");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_open_audio_editor);
    } // Fl_Button* o
    { ck_interp = new Fl_Check_Button(330, 75, 55, 15, "interp");
      ck_interp->tooltip("select to enable interpolation of lpc parameters within each frame");
      ck_interp->down_box(FL_DOWN_BOX);
      ck_interp->labelsize(11);
      ck_interp->callback((Fl_Callback*)cb_ck_interp);
    } // Fl_Check_Button* ck_interp
    { ck_filter = new Fl_Check_Button(275, 75, 50, 15, "filter");
      ck_filter->tooltip("enable lattice iir filtering - the articulatory path beyond the vocal chords");
      ck_filter->down_box(FL_DOWN_BOX);
      ck_filter->labelsize(11);
      ck_filter->callback((Fl_Callback*)cb_ck_filter);
    } // Fl_Check_Button* ck_filter
    { fi_srate = new Fl_Value_Input(445, 72, 65, 20, "pc srate:");
      fi_srate->tooltip("set this to match the current samplerate of pc\'s audio hardware, if incorrec\
tly set you will get pitch and duration errors (chipmunk/slomo)");
      fi_srate->labelsize(11);
      fi_srate->textsize(11);
      fi_srate->callback((Fl_Callback*)cb_fi_srate);
    } // Fl_Value_Input* fi_srate
    { fluid_gph1 = new Fl_Group(5, 620, 970, 320);
      fluid_gph1->end();
    } // Fl_Group* fluid_gph1
    { Fl_Button* o = new Fl_Button(898, 185, 15, 15, "+");
      o->tooltip("go up one address and play");
      o->labelsize(8);
      o->callback((Fl_Callback*)cb_bt_addr_plus);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(898, 200, 15, 15, "-");
      o->tooltip("go down one address and play");
      o->labelsize(9);
      o->callback((Fl_Callback*)cb_bt_addr_minus);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(916, 185, 25, 15, "+4");
      o->tooltip("go up 4 addresses and play");
      o->labelsize(8);
      o->callback((Fl_Callback*)cb_bt_addr_plus4);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(916, 200, 25, 15, "-4");
      o->tooltip("go down 4 addresses and play");
      o->labelsize(8);
      o->callback((Fl_Callback*)cb_bt_addr_minus4);
    } // Fl_Button* o
    { fi_romfname1 = new Fl_Input(45, 46, 865, 20, "rom1:");
      fi_romfname1->tooltip("enter a 2nd rom filename for addr: 0x4000 (16KB), remember roms are paired, s\
o select both together");
      fi_romfname1->labelsize(11);
      fi_romfname1->textsize(11);
      fi_romfname1->callback((Fl_Callback*)cb_fi_romfname1);
      fi_romfname1->when(FL_WHEN_CHANGED);
    } // Fl_Input* fi_romfname1
    { Fl_Button* o = new Fl_Button(925, 46, 35, 20, "Sel");
      o->tooltip("select a vsm rom, need to do this for both roms as they are paired");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_romfile1_sel);
    } // Fl_Button* o
    { fi_lpc_hex = new Fl_Input(65, 133, 830, 20, "lpc hex:");
      fi_lpc_hex->tooltip("lpc hex byte stream (from last rendering), click play on right to re-render a\
udio");
      fi_lpc_hex->labelsize(11);
      fi_lpc_hex->textsize(11);
      fi_lpc_hex->callback((Fl_Callback*)cb_fi_lpc_hex);
      fi_lpc_hex->when(FL_WHEN_CHANGED);
    } // Fl_Input* fi_lpc_hex
    { Fl_Button* o = new Fl_Button(895, 133, 40, 20, "Play");
      o->tooltip("play lpc hex data");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_play_lpc_hex);
    } // Fl_Button* o
    { ck_pitch_6bits = new Fl_Check_Button(180, 75, 85, 15, "pitch6bits");
      ck_pitch_6bits->tooltip("unticked is 5bits \'pitch_count=32\', ticked is 6bits \'pitch_count=64\', see\
 the tms5xxxx code table editbox");
      ck_pitch_6bits->down_box(FL_DOWN_BOX);
      ck_pitch_6bits->labelsize(11);
      ck_pitch_6bits->callback((Fl_Callback*)cb_ck_pitch_6bits);
      ck_pitch_6bits->deactivate();
    } // Fl_Check_Button* ck_pitch_6bits
    { fi_srate_au = new Fl_Value_Input(700, 98, 65, 20, "au srate:");
      fi_srate_au->tooltip("sample rate to use when save .au audio file");
      fi_srate_au->labelsize(12);
      fi_srate_au->textsize(11);
      fi_srate_au->callback((Fl_Callback*)cb_fi_srate_au);
    } // Fl_Value_Input* fi_srate_au
    { fvs_au_aud_gain = new Fl_Value_Slider(770, 97, 150, 21, "au file gain");
      fvs_au_aud_gain->tooltip("set the audio gain when saving to audio file, 100 is unity");
      fvs_au_aud_gain->type(1);
      fvs_au_aud_gain->box(FL_UP_BOX);
      fvs_au_aud_gain->labelsize(9);
      fvs_au_aud_gain->maximum(300);
      fvs_au_aud_gain->value(100);
      fvs_au_aud_gain->textsize(7);
      fvs_au_aud_gain->callback((Fl_Callback*)cb_fvs_au_aud_gain);
    } // Fl_Value_Slider* fvs_au_aud_gain
    { fi_au_fname = new Fl_Input(70, 98, 560, 20, "au fname:");
      fi_au_fname->tooltip("enter .au filename to save audio into");
      fi_au_fname->labelsize(11);
      fi_au_fname->textsize(11);
      fi_au_fname->when(FL_WHEN_CHANGED);
    } // Fl_Input* fi_au_fname
    { Fl_Button* o = new Fl_Button(910, 398, 65, 20, "tms5100");
      o->tooltip("select TMS5xxx chip version and its specific codes for: chirp, engery, pitch \
and lattice iir filter coeffs");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_tms5100);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(910, 448, 65, 20, "tms5220");
      o->tooltip("select TMS5xxx chip version and its specific codes for: chirp, engery, pitch \
and lattice iir filter coeffs");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_tms5220);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(944, 185, 35, 15, "+last");
      o->tooltip("add last rendered byte count to address and play");
      o->labelsize(9);
      o->callback((Fl_Callback*)cb_bt_addr_plus_last);
      Fl_Group::current()->resizable(o);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(910, 423, 65, 20, "tms5200");
      o->tooltip("select TMS5xxx chip version and its specific codes for: chirp, engery, pitch \
and lattice iir filter coeffs");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_tms5200);
    } // Fl_Button* o
    { fi_lpc_decimal = new Fl_Input(65, 153, 830, 20, "lpc decml:");
      fi_lpc_decimal->tooltip("lpc decimal number stream (from last rendering), click play on right to re-re\
nder audio");
      fi_lpc_decimal->labelsize(11);
      fi_lpc_decimal->textsize(11);
      fi_lpc_decimal->callback((Fl_Callback*)cb_fi_lpc_decimal);
      fi_lpc_decimal->when(FL_WHEN_CHANGED);
    } // Fl_Input* fi_lpc_decimal
    { Fl_Button* o = new Fl_Button(895, 153, 40, 20, "Play");
      o->tooltip("play lpc decimal data");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_play_lpc_decimal);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(935, 133, 40, 20, "B.File");
      o->tooltip("play lpc hex data from a binary file");
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_bt_play_lpc_file);
    } // Fl_Button* o
    o->end();
  } // Fl_Double_Window* o
  tb_lpcdata = new Fl_Text_Buffer;
  te_lpcdata->buffer( tb_lpcdata );
  te_lpcdata->textsize(12);
  te_lpcdata->textfont(4);
  tb_romaddr = new Fl_Text_Buffer;
  te_romaddr->buffer( tb_romaddr );
  te_romaddr->textsize(12);
  te_romaddr->textfont(4);
  tb_wordlist = new Fl_Text_Buffer;
  te_wordlist->buffer( tb_wordlist );
  te_wordlist->textsize(12);
  te_wordlist->textfont(4);
  tb_chirp = new Fl_Text_Buffer;
  te_chirp->buffer( tb_chirp );
  te_chirp->textsize(12);
  te_chirp->textfont(4);
  return w;
}

void cb_bt_romfile_sel(Fl_Widget*, void*) {
  select_rom_file();
}

void cb_bt_romfile1_sel(Fl_Widget*, void*) {
  select_rom1_file();
}

void cb_fi_romfname(Fl_Widget*, void*) {
  printf("romfname\n");
}

void cb_fi_romfname1(Fl_Widget*, void*) {
  printf("romfname1\n");
}

void cb_bt_play(Fl_Widget*, void*) {
  printf("play\n");
  say_lpc_str(fi_lpc_hex->value());
  //talk.say_repeat();
}

void cb_bt_stop(Fl_Widget*, void*) {
  printf("stop\n");
  stop_play();
}
Fl_Text_Buffer *tb_lpcdata; 
Fl_Text_Buffer *tb_romaddr; 
Fl_Text_Buffer *tb_wordlist; 
Fl_Text_Buffer *tb_chirp; 

void cb_fvs_aud_gain(Fl_Widget *w, void*) {
  Fl_Value_Slider *o=(Fl_Value_Slider*)w;
  aud_gain = o->value();
  printf("aud_gain: %.2f\n",aud_gain);
}

void cb_bt_open_audio_editor(Fl_Widget*, void*) {
  printf("cb_bt_open_audio_editor()\n");
  cb_open_audio_editor_actual();
}

void cb_fi_romaddr(Fl_Widget *w, void *v) {
  printf("cb_fi_romaddr()\n");
  
  Fl_Input *o=(Fl_Input*)w;
  string s1 = o->value();
  
  unsigned int addr;
  sscanf( s1.c_str(), "%x", &addr );
  
  printf("addr: %x\n", addr );
  talk.say_tmc0580( vsm, addr );
}

void cb_ck_interp(Fl_Widget *w, void *v) {
  Fl_Check_Button *o=(Fl_Check_Button*)w;
  
  if( o->value()) use_interp = 1;
  else use_interp = 0;
  
  printf("cb_ck_interp(): %d\n", use_interp );
  say_lpc_str(fi_lpc_hex->value());
  //talk.say_repeat();
}

void cb_ck_filter(Fl_Widget *w, void *v) {
  Fl_Check_Button *o=(Fl_Check_Button*)w;
  
  if( o->value()) use_filter = 1;
  else use_filter = 0;
  
  printf("cb_ck_filter(): %d\n", use_filter );
  say_lpc_str(fi_lpc_hex->value());
  //talk.say_repeat();
}

void cb_fi_srate(Fl_Widget *w, void *v) {
  Fl_Value_Input *o=(Fl_Value_Input*)w;
  
  
  printf("cb_fi_srate(): %d\n", srate );
  int sr = o->value();
  
  set_new_srate( sr );
  say_lpc_str(fi_lpc_hex->value());
  //talk.say_repeat();
}

void cb_bt_addr_plus(Fl_Widget*, void*) {
  printf("cb_bt_addr_plus\n");
  modify_addr( 1 );
  talk.say_repeat();
}

void cb_bt_addr_minus(Fl_Widget*, void*) {
  printf("cb_bt_addr_minus\n");
  modify_addr(-1);
  talk.say_repeat();
}

void cb_bt_addr_plus4(Fl_Widget*, void*) {
  printf("cb_bt_addr_plus4\n");
  modify_addr(4);
  talk.say_repeat();
}

void cb_bt_addr_minus4(Fl_Widget*, void*) {
  printf("cb_bt_addr_minus4\n");
  modify_addr(-4);
  talk.say_repeat();
}

void cb_bt_addr_plus_last(Fl_Widget*w, void*v) {
  printf("cb_bt_addr_plus_last\n");
  cb_bt_addr_plus_last_actual( w, v );
}

void cb_fi_lpc_hex(Fl_Widget *w, void *v) {
  printf("cb_fi_lpc_hex()\n");
  
  cb_fi_lpc_hex_actual();
  
  //Fl_Input *o=(Fl_Input*)w;
  //string s1 = o->value();
  //say_lpc_str( s1 );
}

void cb_fi_lpc_decimal(Fl_Widget *w, void *v) {
  printf("cb_fi_lpc_decimal()\n");
  cb_fi_lpc_decimal_actual();
  
  //Fl_Input *o=(Fl_Input*)w;
  //string s1 = o->value();
  //say_lpc_str( s1 );
}

void cb_bt_play_lpc_hex(Fl_Widget*, void*) {
  printf("cb_bt_play_lpc_hex()\n");
  cb_bt_play_lpc_hex_actual();
}

void cb_bt_play_lpc_decimal(Fl_Widget*, void*) {
  printf("cb_bt_play_lpc_decimal()\n");
  cb_bt_play_lpc_decimal_actual();
}

void cb_ck_pitch_6bits(Fl_Widget*w, void*v) {
  Fl_Check_Button *o=(Fl_Check_Button*)w;
  
  if( o->value()) bperiod_6bits = 1;
  else bperiod_6bits = 0;
  
  printf("cb_ck_period_6bits: %d\n", bperiod_6bits );
  say_lpc_str(fi_lpc_hex->value());
  //talk.say_repeat();
}

void cb_fi_srate_au(Fl_Widget *w, void *v) {
  Fl_Value_Input *o=(Fl_Value_Input*)w;
  
  
  printf("cb_fi_srate_au(): %d\n", srate );
  int sr = o->value();
  
  set_new_srate_au( sr );
  //talk.say_repeat();
}

void cb_fvs_au_aud_gain(Fl_Widget *w, void*) {
  Fl_Value_Slider *o=(Fl_Value_Slider*)w;
  au_aud_gain = o->value();
  printf("au_aud_gain: %d\n",au_aud_gain);
}

void cb_bt_tms5100(Fl_Widget *w, void*) {
  printf("cb_bt_tms5100\n");
  cb_bt_tms5100_actual();
}

void cb_bt_tms5200(Fl_Widget *w, void*) {
  printf("cb_bt_tms5200\n");
  cb_bt_tms5200_actual();
}

void cb_bt_tms5220(Fl_Widget *w, void*) {
  printf("cb_bt_tms5220\n");
  cb_bt_tms5220_actual();
}

void cb_bt_play_lpc_file(Fl_Widget*, void*) {
  printf("cb_bt_play_lpc_file()\n");
  cb_bt_play_lpc_file_actual();
}
